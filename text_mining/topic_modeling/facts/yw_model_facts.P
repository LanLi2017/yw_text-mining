
% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, 'topic_modeling', 'topic_modeling', 1, 59).
program(2, 'initialize_run', 'topic_modeling.initialize_run', 15, 19).
program(3, 'ConstructCorpus', 'topic_modeling.ConstructCorpus', 20, 48).
program(4, 'AccessText', 'topic_modeling.ConstructCorpus.AccessText', 33, 39).
program(5, 'PreprocessFile', 'topic_modeling.ConstructCorpus.PreprocessFile', 40, 47).
program(6, 'Train_LDA_Model', 'topic_modeling.Train_LDA_Model', 49, 58).

% FACT: workflow(program_id).
workflow(1).
workflow(3).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(3, 4).
has_subprogram(3, 5).
has_subprogram(1, 6).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, 'in', 'Static_text', 'topic_modeling<-Static_text', 3, 1).
port(2, 'param', 'stopwords', 'topic_modeling<-stopwords', 5, 2).
port(3, 'param', 'regexr', 'topic_modeling<-regexr', 6, 3).
port(4, 'param', 'num_topics', 'topic_modeling<-num_topics', 8, 4).
port(5, 'param', 'num_iteration', 'topic_modeling<-num_iteration', 9, 5).
port(6, 'out', 'run_log', 'topic_modeling->run_log', 10, 6).
port(7, 'out', 'LDA_model', 'topic_modeling->LDA_model', 12, 7).
port(8, 'out', 'run_log', 'topic_modeling.initialize_run->run_log', 17, 8).
port(9, 'in', 'Static_text', 'topic_modeling.ConstructCorpus<-Static_text', 22, 9).
port(10, 'param', 'stopwords', 'topic_modeling.ConstructCorpus<-stopwords', 25, 10).
port(11, 'param', 'regexr', 'topic_modeling.ConstructCorpus<-regexr', 26, 11).
port(12, 'out', 'dictionary', 'topic_modeling.ConstructCorpus->dictionary', 28, 12).
port(13, 'out', 'corpus', 'topic_modeling.ConstructCorpus->corpus', 31, 13).
port(14, 'in', 'Static_text', 'topic_modeling.ConstructCorpus.AccessText<-Static_text', 35, 14).
port(15, 'out', 'text_file', 'topic_modeling.ConstructCorpus.AccessText->text_file', 37, 15).
port(16, 'param', 'stopwords', 'topic_modeling.ConstructCorpus.PreprocessFile<-stopwords', 42, 16).
port(17, 'param', 'regular_expression', 'topic_modeling.ConstructCorpus.PreprocessFile<-regular_expression', 43, 17).
port(18, 'in', 'TextRead', 'topic_modeling.ConstructCorpus.PreprocessFile<-TextRead', 44, 15).
port(19, 'out', 'dictionary', 'topic_modeling.ConstructCorpus.PreprocessFile->dictionary', 45, 18).
port(20, 'out', 'Corpus', 'topic_modeling.ConstructCorpus.PreprocessFile->Corpus', 46, 19).
port(21, 'in', 'Corpus', 'topic_modeling.Train_LDA_Model<-Corpus', 51, 13).
port(22, 'in', 'dictionary', 'topic_modeling.Train_LDA_Model<-dictionary', 52, 12).
port(23, 'param', 'num_iteration', 'topic_modeling.Train_LDA_Model<-num_iteration', 53, 20).
port(24, 'param', 'num_topics', 'topic_modeling.Train_LDA_Model<-num_topics', 54, 21).
port(25, 'out', 'LDA_model', 'topic_modeling.Train_LDA_Model->LDA_model', 55, 22).

% FACT: port_alias(port_id, alias).
port_alias(3, 'regular_expression').
port_alias(11, 'regular_expression').
port_alias(12, 'dictionary').
port_alias(13, 'Corpus').
port_alias(15, 'TextRead').

% FACT: port_uri_template(port_id, uri).
port_uri_template(1, 'file:news2012.txt').
port_uri_template(7, 'file:LDA_model.txt').
port_uri_template(8, 'file:run_log.log').
port_uri_template(9, 'file:news2012.txt').
port_uri_template(14, 'file:news2012.txt').
port_uri_template(25, 'file:LDA_model.txt').

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(1, 2).
has_in_port(1, 3).
has_in_port(1, 4).
has_in_port(1, 5).
has_in_port(3, 9).
has_in_port(3, 10).
has_in_port(3, 11).
has_in_port(4, 14).
has_in_port(5, 16).
has_in_port(5, 17).
has_in_port(5, 18).
has_in_port(6, 21).
has_in_port(6, 22).
has_in_port(6, 23).
has_in_port(6, 24).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 6).
has_out_port(1, 7).
has_out_port(2, 8).
has_out_port(3, 12).
has_out_port(3, 13).
has_out_port(4, 15).
has_out_port(5, 19).
has_out_port(5, 20).
has_out_port(6, 25).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, 'Static_text', '[Static_text]').
data(2, 'stopwords', '[stopwords]').
data(3, 'regular_expression', '[regular_expression]').
data(4, 'num_topics', '[num_topics]').
data(5, 'num_iteration', '[num_iteration]').
data(6, 'run_log', '[run_log]').
data(7, 'LDA_model', '[LDA_model]').
data(8, 'run_log', 'topic_modeling[run_log]').
data(9, 'Static_text', 'topic_modeling[Static_text]').
data(10, 'stopwords', 'topic_modeling[stopwords]').
data(11, 'regular_expression', 'topic_modeling[regular_expression]').
data(12, 'dictionary', 'topic_modeling[dictionary]').
data(13, 'Corpus', 'topic_modeling[Corpus]').
data(20, 'num_iteration', 'topic_modeling[num_iteration]').
data(21, 'num_topics', 'topic_modeling[num_topics]').
data(22, 'LDA_model', 'topic_modeling[LDA_model]').
data(14, 'Static_text', 'topic_modeling.ConstructCorpus[Static_text]').
data(15, 'TextRead', 'topic_modeling.ConstructCorpus[TextRead]').
data(16, 'stopwords', 'topic_modeling.ConstructCorpus[stopwords]').
data(17, 'regular_expression', 'topic_modeling.ConstructCorpus[regular_expression]').
data(18, 'dictionary', 'topic_modeling.ConstructCorpus[dictionary]').
data(19, 'Corpus', 'topic_modeling.ConstructCorpus[Corpus]').

% FACT: channel(channel_id, data_id).
channel(12, 6).
channel(13, 7).
channel(14, 9).
channel(15, 10).
channel(16, 11).
channel(17, 13).
channel(18, 12).
channel(19, 20).
channel(20, 21).
channel(21, 1).
channel(22, 2).
channel(23, 3).
channel(24, 4).
channel(25, 5).
channel(26, 8).
channel(27, 22).
channel(1, 12).
channel(2, 13).
channel(3, 14).
channel(4, 16).
channel(5, 17).
channel(6, 15).
channel(7, 9).
channel(8, 10).
channel(9, 11).
channel(10, 18).
channel(11, 19).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(8, 12).
port_connects_to_channel(25, 13).
port_connects_to_channel(9, 14).
port_connects_to_channel(10, 15).
port_connects_to_channel(11, 16).
port_connects_to_channel(13, 17).
port_connects_to_channel(21, 17).
port_connects_to_channel(12, 18).
port_connects_to_channel(22, 18).
port_connects_to_channel(23, 19).
port_connects_to_channel(24, 20).
port_connects_to_channel(9, 21).
port_connects_to_channel(10, 22).
port_connects_to_channel(11, 23).
port_connects_to_channel(24, 24).
port_connects_to_channel(23, 25).
port_connects_to_channel(8, 26).
port_connects_to_channel(25, 27).
port_connects_to_channel(19, 1).
port_connects_to_channel(20, 2).
port_connects_to_channel(14, 3).
port_connects_to_channel(16, 4).
port_connects_to_channel(17, 5).
port_connects_to_channel(15, 6).
port_connects_to_channel(18, 6).
port_connects_to_channel(14, 7).
port_connects_to_channel(16, 8).
port_connects_to_channel(17, 9).
port_connects_to_channel(19, 10).
port_connects_to_channel(20, 11).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 14).
inflow_connects_to_channel(2, 15).
inflow_connects_to_channel(3, 16).
inflow_connects_to_channel(5, 19).
inflow_connects_to_channel(4, 20).
inflow_connects_to_channel(1, 21).
inflow_connects_to_channel(2, 22).
inflow_connects_to_channel(3, 23).
inflow_connects_to_channel(4, 24).
inflow_connects_to_channel(5, 25).
inflow_connects_to_channel(9, 3).
inflow_connects_to_channel(10, 4).
inflow_connects_to_channel(11, 5).
inflow_connects_to_channel(9, 7).
inflow_connects_to_channel(10, 8).
inflow_connects_to_channel(11, 9).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(6, 12).
outflow_connects_to_channel(7, 13).
outflow_connects_to_channel(6, 26).
outflow_connects_to_channel(7, 27).
outflow_connects_to_channel(12, 1).
outflow_connects_to_channel(13, 2).
outflow_connects_to_channel(12, 10).
outflow_connects_to_channel(13, 11).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).
